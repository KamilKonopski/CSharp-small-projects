using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace MiniChatSimulator.Services
{
    public class ChatBot
    {
        private readonly Dictionary<string, string> _responses = new()
        {
            { "czesc", "CzeÅ›Ä‡! Jak siÄ™ masz?" },
            { "hej", "Hej, co tam?" },
            { "jak sie masz", "Mam siÄ™ dobrze, dziÄ™ki! A Ty?" },
            { "co robisz", "Czekam na Twoje pytanie. ðŸ˜Š" },
            { "do widzenia", "Na razie! ðŸ‘‹" },
            { "jak masz na imie", "Jestem prostym botem, ale moÅ¼esz mi nadaÄ‡ imiÄ™!" },
            { "pomoc", "MoÅ¼esz powiedzieÄ‡ 'czeÅ›Ä‡', 'co robisz', 'jak siÄ™ masz', itp." },
            { "dziekuje", "Nie ma sprawy! ðŸ˜„" },
            { "dzieÅ„ dobry", "DzieÅ„ dobry! Jak mogÄ™ pomÃ³c?" },
            { "ktora godzina", $"Teraz jest: {DateTime.Now:HH:mm}" },
        };

        public string GetResponse(string input)
        {
            var cleanedInput = Normalize(input);

            foreach (var key in _responses.Keys)
            {
                if (cleanedInput.Contains(key))
                    return _responses[key];
            }

            return "Nie rozumiem. MoÅ¼esz zapytaÄ‡ inaczej?";
        }

        private string Normalize(string text)
        {
            if (string.IsNullOrWhiteSpace(text))
                return string.Empty;

            text = text.ToLowerInvariant();

            // UsuÅ„ polskie znaki
            text = RemoveDiacritics(text);

            // UsuÅ„ znaki interpunkcyjne
            text = Regex.Replace(text, @"[^\w\s]", "");

            return text;
        }

        private string RemoveDiacritics(string text)
        {
            var normalized = text.Normalize(NormalizationForm.FormD);
            var builder = new StringBuilder();

            foreach (var ch in normalized)
            {
                var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(ch);
                if (unicodeCategory != UnicodeCategory.NonSpacingMark)
                    builder.Append(ch);
            }

            return builder.ToString().Normalize(NormalizationForm.FormC);
        }
    }
}